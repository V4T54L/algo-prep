package templates

import (
	"app/internal/domain/aggregate"
	"fmt"
)

templ ProblemHeader() {
	<div class="flex justify-between items-center flex-wrap gap-4 mb-6">
		<div>
			<h1 class="text-3xl font-bold">Problems</h1>
			<p class="text-gray-400 text-sm">Practice coding problems to improve your skills</p>
		</div>
		<a href="/problems/create" class="bg-gradient-to-r from-blue-500 to-green-400 text-white px-4 py-2 rounded font-semibold">
			+ Create Problem
		</a>
	</div>
}

templ ProblemFilterBar() {
	<div class="flex flex-col md:flex-row gap-4 mb-8">
		<input
			type="text"
			placeholder="Search problems..."
			name="q"
			value=""
			class="flex-1 px-4 py-2 bg-gray-800 border border-gray-700 rounded focus:outline-none"
		/>
		<select name="difficulty" class="bg-gray-800 border border-gray-700 px-4 py-2 rounded text-white">
			<option value="">All Difficulties</option>
			<option value="Easy">Easy</option>
			<option value="Medium">Medium</option>
			<option value="Hard">Hard</option>
		</select>
		<select name="category" class="bg-gray-800 border border-gray-700 px-4 py-2 rounded text-white">
			<option value="">All Categories</option>
			//   for _, v := range problem.AvailableCategories
			<option value="category_one">category_one</option>
			<option value="category_two">category_two</option>
			<option value="category_three">category_three</option>
		</select>
	</div>
}

templ ProblemListItem(problem *aggregate.ProblemInfo) {
	<div class="bg-gray-900 border border-gray-800 p-5 rounded-lg flex flex-col md:flex-row md:justify-between items-start md:items-center gap-4">
		<div>
			<h3 class="text-lg font-semibold text-white">{ problem.Title }</h3>
			<div class="flex flex-wrap gap-2 my-2">
				<span
					class={ fmt.Sprintf(`px-2 py-1 text-xs rounded bg-opacity-20 %s`, func() string {
							switch problem.Difficulty {
							case "Easy":
								return "bg-green-600 text-green-300"
							case "Medium":
								return "bg-yellow-600 text-yellow-300"
							case "Hard":
								return "bg-red-600 text-red-300"
							default:
								return ""
							}
						}()) }
				>
					{ problem.Difficulty }
				</span>
				// {{range problem.Categories}}
				<span class="bg-gray-800 text-gray-300 text-xs px-2 py-1 rounded">{ "category" }</span>
				// {{end}}
				// {{if problem.Solved}}
				<span class="bg-green-600 text-white text-xs px-2 py-1 rounded">Solved</span>
				// {{end}}
			</div>
			<p class="text-gray-400 text-sm">{ problem.Description }</p>
			<div class="text-yellow-400 text-sm mt-2 flex items-center gap-1">ðŸ”¥ { problem.Likes }</div>
		</div>
		<div class="flex gap-2">
			<a href="/problems/{problem.ID}/edit" class="bg-gray-800 px-4 py-1 rounded text-sm text-white hover:bg-gray-700">Edit</a>
			<a href="/problems/{problem.ID}" class="bg-blue-600 px-4 py-1 rounded text-sm text-white hover:bg-blue-500">Solve</a>
		</div>
	</div>
}

templ ProblemList(problems []*aggregate.ProblemInfo) {
	if len(problems)==0 {
		<p class="text-gray-400">No problems found.</p>
	} else {
		for _, problem := range problems {
			@ProblemListItem(problem)
		}
	}
}

templ ProblemListPage(problems []*aggregate.ProblemInfo) {
	<section class="bg-gray-950 text-white min-h-screen px-4 md:px-12 py-10">
		<div class="max-w-6xl mx-auto">
			@ProblemHeader()
			<form method="GET">
				@ProblemFilterBar()
			</form>
			<div class="space-y-6 mt-4">
				@ProblemList(problems)
			</div>
			@PaginationControls()
		</div>
	</section>
}
